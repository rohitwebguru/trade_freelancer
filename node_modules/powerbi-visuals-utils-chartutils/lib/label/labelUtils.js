/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
import { CssConstants } from "powerbi-visuals-utils-svgutils";
import { drawDefaultLabels as newDrawDefaultLabels, getDataLabelLayoutOptions as newGetDataLabelLayoutOptions, getNumberOfLabelsToRender as newGetNumberOfLabelsToRender } from "./newDataLabelUtils";
export const DefaultFontSizeInPt = 9;
export const horizontalLabelBackgroundPadding = 4;
export const verticalLabelBackgroundPadding = 2;
export let labelGraphicsContextClass = CssConstants.createClassAndSelector("labelGraphicsContext");
export let labelBackgroundGraphicsContextClass = CssConstants.createClassAndSelector("labelBackgroundGraphicsContext");
export function downgradeToOldLabels(labels) {
    if (!labels)
        return;
    return labels.map((label) => {
        let inheritedLabel = Object.assign({}, label);
        inheritedLabel.fontProperties = null;
        let oldLabel = inheritedLabel;
        oldLabel.fill = label.fontProperties ? label.fontProperties.color : undefined;
        oldLabel.fontSize = (label.fontProperties && label.fontProperties.size) ? label.fontProperties.size.pt : undefined;
        oldLabel.fontFamily = label.fontProperties ? label.fontProperties.family : undefined;
        return oldLabel;
    });
}
export function drawDefaultLabels(context, dataLabels, numeric = false, hasTooltip = false) {
    return newDrawDefaultLabels(context, downgradeToOldLabels(dataLabels), numeric, hasTooltip);
}
export function getDataLabelLayoutOptions(chartType) {
    return newGetDataLabelLayoutOptions(chartType);
}
export function getNumberOfLabelsToRender(viewportWidth, labelDensity, minimumLabelsToRender, estimatedLabelWidth) {
    return newGetNumberOfLabelsToRender(viewportWidth, labelDensity, minimumLabelsToRender, estimatedLabelWidth);
}
//# sourceMappingURL=labelUtils.js.map