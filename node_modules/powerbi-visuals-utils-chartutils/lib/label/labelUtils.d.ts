import { Selection } from "d3-selection";
import { CssConstants } from "powerbi-visuals-utils-svgutils";
import { FontProperties } from "./fontProperties";
import { DataLabelLayoutOptions, Label, LabelOld, LabelOrientation } from "./labelLayout";
export interface VisualDataLabelsSettings {
    show: boolean;
    fontProperties: FontProperties;
    showLabelPerSeries?: boolean;
    labelOrientation?: LabelOrientation;
    isSeriesExpanded?: boolean;
    displayUnits?: number;
    showCategory?: boolean;
    position?: any;
    precision?: number;
    percentagePrecision?: number;
    categoryLabelColor?: string;
    labelStyle?: any;
    minFontSize?: number;
    maxFontSize?: number;
    labelOverflow?: boolean;
    enableBackground?: boolean;
    backgroundColor?: string;
    backgroundTransparency?: number;
}
export interface LabelEnabledDataPoint {
    labelX?: number;
    labelY?: number;
    labelFill?: string;
    labeltext?: string;
    labelFormatString?: string;
    isLabelInside?: boolean;
    labelFontSize?: number;
}
export declare const enum CartesianChartType {
    Line = 0,
    Area = 1,
    StackedArea = 2,
    ClusteredColumn = 3,
    StackedColumn = 4,
    ClusteredBar = 5,
    StackedBar = 6,
    HundredPercentStackedBar = 7,
    HundredPercentStackedColumn = 8,
    RibbonChart = 9,
    Scatter = 10,
    ComboChart = 11,
    DataDot = 12,
    Waterfall = 13,
    LineClusteredColumnCombo = 14,
    LineStackedColumnCombo = 15,
    DataDotClusteredColumnCombo = 16,
    DataDotStackedColumnCombo = 17,
    RealTimeLineChart = 18
}
export declare const DefaultFontSizeInPt = 9;
export declare const horizontalLabelBackgroundPadding = 4;
export declare const verticalLabelBackgroundPadding = 2;
export declare let labelGraphicsContextClass: CssConstants.ClassAndSelector;
export declare let labelBackgroundGraphicsContextClass: CssConstants.ClassAndSelector;
export declare function downgradeToOldLabels(labels: Label[]): LabelOld[];
export declare function drawDefaultLabels(context: Selection<any, any, any, any>, dataLabels: Label[], numeric?: boolean, hasTooltip?: boolean): Selection<any, any, any, any>;
export declare function getDataLabelLayoutOptions(chartType: CartesianChartType): DataLabelLayoutOptions;
export declare function getNumberOfLabelsToRender(viewportWidth: number, labelDensity: number, minimumLabelsToRender: number, estimatedLabelWidth: number): number;
