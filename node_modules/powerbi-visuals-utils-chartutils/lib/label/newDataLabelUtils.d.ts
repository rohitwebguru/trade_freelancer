import { Selection } from "d3-selection";
import { LabelOld } from "./labelLayout";
import { CartesianChartType } from "./labelUtils";
export declare const DefaultLabelFontSizeInPt = 9;
export declare let startingLabelOffset: number;
export declare let maxLabelOffset: number;
export declare const horizontalLabelBackgroundPadding = 4;
export declare const verticalLabelBackgroundPadding = 2;
export declare function drawDefaultLabels(context: Selection<any, any, any, any>, dataLabels: LabelOld[], numeric?: boolean, hasTooltip?: boolean): Selection<any, any, any, any>;
export interface DataLabelLayoutOptions {
    /** The amount of offset to start with when the data label is not centered */
    startingOffset: number;
    /** Maximum distance labels will be offset by */
    maximumOffset: number;
    /** The amount to increase the offset each attempt while laying out labels */
    offsetIterationDelta?: number;
    /** Horizontal padding used for checking whether a label is inside a parent shape */
    horizontalPadding?: number;
    /** Vertical padding used for checking whether a label is inside a parent shape */
    verticalPadding?: number;
    /** Should we draw reference lines in case the label offset is greater then the default */
    allowLeaderLines?: boolean;
    /** Should the layout system attempt to move the label inside the viewport when it outside, but close */
    attemptToMoveLabelsIntoViewport?: boolean;
}
export declare let dataLabelLayoutStartingOffset: number;
export declare let dataLabelLayoutOffsetIterationDelta: number;
export declare let dataLabelLayoutMaximumOffset: number;
export declare function getDataLabelLayoutOptions(chartType: CartesianChartType): DataLabelLayoutOptions;
export declare function getNumberOfLabelsToRender(viewportWidth: number, labelDensity: number, minimumLabelsToRender: number, estimatedLabelWidth: number): number;
